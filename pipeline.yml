---
resource_types:
  - name: pull-request
    type: docker-image
    source:
      repository: teliaoss/github-pr-resource

resources:
  - name: base-python-image
    type: docker-image
    icon: language-python
    source:
      repository: python
      tag: 3.7-slim

  - name: ecr-image-ingest
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      tag: ingest
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

  - name: ingest-requirements
    type: pull-request
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      paths:
        - dev-requirements.txt
      repository: ONSdigital/es-results-pipeline
      access_token: ((git_access_token))

  - name: ingest-repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-ingest-takeon-data
      access_token: ((git_access_token))

  - name: ingest-deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-ingest-takeon-data.git
      branch: master

  - name: ecr-image-enrichment
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      tag: enrichment
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

  - name: enrichment-requirements
    type: pull-request
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      paths:
        - dev-requirements.txt
      repository: ONSdigital/es-results-pipeline
      access_token: ((git_access_token))

  - name: enrichment-repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-enrichment-sg
      access_token: ((git_access_token))

  - name: enrichment-deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-enrichment-sg.git
      branch: master

  - name: ecr-image-strata
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      tag: strata
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

  - name: strata-requirements
    type: pull-request
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      paths:
        - dev-requirements.txt
      repository: ONSdigital/es-results-pipeline
      access_token: ((git_access_token))

  - name: strata-repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-strata-sg
      access_token: ((git_access_token))

  - name: strata-deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-strata-sg.git
      branch: master

  - name: ecr-image-imputation
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      tag: imputation
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

  - name: imputation-requirements
    type: pull-request
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      paths:
        - dev-requirements.txt
      repository: ONSdigital/es-results-pipeline
      access_token: ((git_access_token))

  - name: imputation-repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-imputation-sg
      access_token: ((git_access_token))

  - name: imputation-deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-imputation-sg.git
      branch: master

  - name: ecr-image-aggregation
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      tag: aggregation
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

  - name: aggregation-requirements
    type: pull-request
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      paths:
        - dev-requirements.txt
      repository: ONSdigital/es-results-pipeline
      access_token: ((git_access_token))

  - name: aggregation-repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-aggregation-sg
      access_token: ((git_access_token))

  - name: aggregation-deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-aggregation-sg.git
      branch: master

  - name: ecr-image-disclosure
    type: docker-image
    icon: docker
    source:
      repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
      tag: disclosure
      aws_access_key_id: ((ecr-svcaccount.api-key))
      aws_secret_access_key: ((ecr-svcaccount.api-secret))

  - name: disclosure-requirements
    type: pull-request
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      paths:
        - dev-requirements.txt
      repository: ONSdigital/es-results-pipeline
      access_token: ((git_access_token))

  - name: disclosure-repository
    type: pull-request
    check_every: 24h
    webhook_token: ((webhook_token-concourse))
    icon: github-circle
    source:
      repository: ONSdigital/es-disclosure-sg
      access_token: ((git_access_token))

  - name: disclosure-deploy-repository
    type: git
    check_every: 24h
    icon: github-circle
    webhook_token: ((webhook_token-concourse))
    source:
      uri: https://github.com/ONSdigital/es-disclosure-sg.git
      branch: master

##########################################################################################
#####                                     Groups                                     #####
##########################################################################################

groups:
- name: All
  jobs:
  - installing-dependencies-ingest
  - installing-dependencies-enrichment
  - installing-dependencies-strata
  - installing-dependencies-imputation
  - installing-dependencies-aggregation
  - installing-dependencies-disclosure
  - ingest-quality-checks
  - enrichment-quality-checks
  - strata-quality-checks
  - imputation-quality-checks
  - aggregation-quality-checks
  - disclosure-quality-checks
  - ingest-deploy
  - enrichment-deploy
  - strata-deploy
  - imputation-deploy
  - aggregation-deploy
  - disclosure-deploy

- name: Installing-Dependencies
  jobs:
  - installing-dependencies-ingest
  - installing-dependencies-enrichment
  - installing-dependencies-strata
  - installing-dependencies-imputation
  - installing-dependencies-aggregation
  - installing-dependencies-disclosure

- name: Quality-Checks
  jobs:
  - ingest-quality-checks
  - enrichment-quality-checks
  - strata-quality-checks
  - imputation-quality-checks
  - aggregation-quality-checks
  - disclosure-quality-checks

- name: Deployment
  jobs:
  - ingest-deploy
  - enrichment-deploy
  - strata-deploy
  - imputation-deploy
  - aggregation-deploy
  - disclosure-deploy

##########################################################################################
#####                            Installing Dependencies                             #####
##########################################################################################
jobs:
  - name: installing-dependencies-ingest
    plan:
      - in_parrallel:
        - get: ingest-requirements
          trigger: true

        - get: ingest-repository

        - get: base-python-image
          params:
            save: true

      - put: ecr-image-ingest
        params:
          load_base: base-python-image
          build: ingest-repository

  - name: installing-dependencies-enrichment
    plan:
      - in_parrallel:
        - get: enrichment-requirements
          trigger: true

        - get: enrichment-repository

        - get: base-python-image
          params:
            save: true

      - put: ecr-image-enrichment
        params:
          load_base: base-python-image
          build: enrichment-repository

  - name: installing-dependencies-strata
    plan:
      - in_parrallel:
        - get: strata-requirements
          trigger: true

        - get: strata-repository

        - get: base-python-image
          params:
            save: true

      - put: ecr-image-strata
        params:
          load_base: base-python-image
          build: strata-repository

  - name: installing-dependencies-imputation
    plan:
      - in_parrallel:
        - get: imputation-requirements
          trigger: true

        - get: imputation-repository

        - get: base-python-image
          params:
            save: true

      - put: ecr-image-imputation
        params:
          load_base: base-python-image
          build: imputation-repository

  - name: installing-dependencies-aggregation
    plan:
      - in_parrallel:
        - get: aggregation-requirements
          trigger: true

        - get: aggregation-repository

        - get: base-python-image
          params:
            save: true

      - put: ecr-image-aggregation
        params:
          load_base: base-python-image
          build: aggregation-repository

  - name: installing-dependencies-disclosure
    plan:
      - in_parrallel:
        - get: disclosure-requirements
          trigger: true

        - get: disclosure-repository

        - get: base-python-image
          params:
            save: true

      - put: ecr-image-disclosure
        params:
          load_base: base-python-image
          build: disclosure-repository

##########################################################################################
#####                               Quality Checks                                   #####
##########################################################################################

  - name: ingest-quality-checks
    plan:

      - get: ingest-repository
        trigger: true
        version: every

      - put: ingest-repository
        params:
          path: ingest-repository
          status: success

      - in_parallel:
          - task: unit-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: ingest
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: ingest-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd ingest-repository
                    PYTHONPATH=$(pwd) pytest
            on_failure:
              put: ingest-repository
              params:
                path: ingest-repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: ingest
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: ingest-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/ingest-repository
            on_failure:
              put: ingest-repository
              params:
                path: ingest-repository
                status: failure
                description: Code standards are not met

##########################################################################################
#####                                 Enrichment                                     #####
##########################################################################################

  - name: enrichment-quality-checks
    plan:

      - get: enrichment-repository
        trigger: true
        version: every

      - put: enrichment-repository
        params:
          path: enrichment-repository
          status: success

      - in_parallel:
          - task: unit-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: enrichment
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: enrichment-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd enrichment-repository
                    PYTHONPATH=$(pwd) pytest
            on_failure:
              put: enrichment-repository
              params:
                path: enrichment-repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: enrichment
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/enrichment-repository
            on_failure:
              put: enrichment-repository
              params:
                path: enrichment-repository
                status: failure
                description: Code standards are not met

##########################################################################################
#####                                    Strata                                      #####
##########################################################################################

  - name: strata-quality-checks
    plan:

      - get: strata-repository
        trigger: true
        version: every

      - put: strata-repository
        params:
          path: strata-repository
          status: success

      - in_parallel:
          - task: aws-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: strata
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: strata-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd strata-repository
                    PYTHONPATH=$(pwd) pytest
            on_failure:
              put: strata-repository
              params:
                path: strata-repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: strata
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: strata-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/strata-repository
            on_failure:
              put: strata-repository
              params:
                path: strata-repository
                status: failure
                description: Code standards are not met

##########################################################################################
#####                                 Imputation                                     #####
##########################################################################################

  - name: imputation-quality-checks
    plan:

      - get: imputation-repository
        trigger: true
        version: every

      - put: imputation-repository
        params:
          path: imputation-repository
          status: success

      - in_parallel:
          - task: aws-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: imputation
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: imputation-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd imputation-repository
                    PYTHONPATH=$(pwd) pytest
            on_failure:
              put: imputation-repository
              params:
                path: imputation-repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: imputation
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: imputation-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/imputation-repository
            on_failure:
              put: imputation-repository
              params:
                path: imputation-repository
                status: failure
                description: Code standards are not met

##########################################################################################
#####                                 Aggregation                                    #####
##########################################################################################

  - name: aggregation-quality-checks
    plan:

      - get: aggregation-repository
        trigger: true
        version: every

      - put: aggregation-repository
        params:
          path: aggregation-repository
          status: success

      - in_parallel:
          - task: unit-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: aggregation
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: aggregation-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd aggregation-repository
                    PYTHONPATH=$(pwd) pytest
            on_failure:
              put: aggregation-repository
              params:
                path: aggregation-repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: aggregation
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: aggregation-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/aggregation-repository
            on_failure:
              put: aggregation-repository
              params:
                path: aggregation-repository
                status: failure
                description: Code standards are not met

##########################################################################################
#####                                 Disclosure                                     #####
##########################################################################################

  - name: disclosure-quality-checks
    plan:

      - get: disclosure-repository
        trigger: true
        version: every

      - put: disclosure-repository
        params:
          path: disclosure-repository
          status: success

      - in_parallel:
          - task: aws-tests
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: disclosure
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: disclosure-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    cd disclosure-repository
                    PYTHONPATH=$(pwd) pytest
            on_failure:
              put: disclosure-repository
              params:
                path: disclosure-repository
                status: failure
                description: Failing tests are present

          - task: flake8
            config:
              platform: linux
              image_resource:
                type: docker-image
                source:
                  repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
                  tag: disclosure
                  aws_access_key_id: ((ecr-svcaccount.api-key))
                  aws_secret_access_key: ((ecr-svcaccount.api-secret))
              inputs:
                - name: disclosure-repository
              run:
                path: sh
                args:
                  - -exc
                  - |
                    flake8 $(pwd)/disclosure-repository
            on_failure:
              put: disclosure-repository
              params:
                path: disclosure-repository
                status: failure
                description: Code standards are not met

##########################################################################################
#####                                 Deployment                                     #####
##########################################################################################

  - name: ingest-deploy
    plan:
      - get: ingest-deploy-repository
        trigger: true

      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: ingest-deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-private-\* --subnet-ids --output json > json_outputs/subnets_output.json
                aws ec2 describe-security-groups --filters Name=tag:Name,Values=results-tf-sg-private --output json > json_outputs/security_groups_output.json
          outputs:
            - name: json_outputs

      - task: serverless-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              tag: ingest
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: ingest-deploy-repository
            - name: json_outputs
          run:
            path: ingest-deploy-repository/serverless.sh

##########################################################################################
#####                                 Enrichment                                     #####
##########################################################################################

  - name: enrichment-deploy
    plan:
      - get: enrichment-deploy-repository
        trigger: true

      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: enrichment-deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-private-\* --subnet-ids --output json > json_outputs/subnets_output.json
                aws ec2 describe-security-groups --filters Name=tag:Name,Values=results-tf-sg-private --output json > json_outputs/security_groups_output.json
          outputs:
            - name: json_outputs

      - task: serverless-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              tag: enrichment
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: enrichment-deploy-repository
            - name: json_outputs
          run:
            path: enrichment-deploy-repository/serverless.sh

##########################################################################################
#####                                    Strata                                      #####
##########################################################################################
  - name: strata-deploy
    plan:
      - get: strata-deploy-repository
        trigger: true

      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: strata-deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-private-\* --subnet-ids --output json > json_outputs/subnets_output.json
                aws ec2 describe-security-groups --filters Name=tag:Name,Values=results-tf-sg-private --output json > json_outputs/security_groups_output.json
          outputs:
            - name: json_outputs

      - task: serverless-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              tag: strata
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: strata-deploy-repository
            - name: json_outputs
          run:
            path: strata-deploy-repository/serverless.sh

##########################################################################################
#####                                 Imputation                                     #####
##########################################################################################

  - name: imputation-deploy
    plan:
      - get: imputation-deploy-repository
        trigger: true

      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: imputation-deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-private-\* --subnet-ids --output json > json_outputs/subnets_output.json
                aws ec2 describe-security-groups --filters Name=tag:Name,Values=results-tf-sg-private --output json > json_outputs/security_groups_output.json
          outputs:
            - name: json_outputs

      - task: serverless-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              tag: imputation
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: imputation-deploy-repository
            - name: json_outputs
          run:
            path: imputation-deploy-repository/serverless.sh

##########################################################################################
#####                                 Aggregation                                    #####
##########################################################################################

  - name: aggregation-deploy
    plan:
      - get: aggregation-deploy-repository
        trigger: true

      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: aggregation-deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-private-\* --subnet-ids --output json > json_outputs/subnets_output.json
                aws ec2 describe-security-groups --filters Name=tag:Name,Values=results-tf-sg-private --output json > json_outputs/security_groups_output.json
          outputs:
            - name: json_outputs

      - task: serverless-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              tag: aggregation
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: aggregation-deploy-repository
            - name: json_outputs
          run:
            path: aggregation-deploy-repository/serverless.sh

##########################################################################################
#####                                 Disclosure                                     #####
##########################################################################################

  - name: disclosure-deploy
    plan:
      - get: disclosure-deploy-repository
        trigger: true

      - task: obtaining-vpc-details
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: mesosphere/aws-cli
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            AWS_DEFAULT_REGION: eu-west-2
            SLS_DEBUG: 1
            TERM: xterm
          inputs:
            - name: disclosure-deploy-repository
          run:
            path: sh
            args:
              - -ec
              - |
                aws ec2 describe-subnets --filters Name=tag:Name,Values=results-tf-sub-private-\* --subnet-ids --output json > json_outputs/subnets_output.json
                aws ec2 describe-security-groups --filters Name=tag:Name,Values=results-tf-sg-private --output json > json_outputs/security_groups_output.json
          outputs:
            - name: json_outputs

      - task: serverless-deploy
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: 014669633018.dkr.ecr.eu-west-2.amazonaws.com/results-cicd
              tag: disclosure
              aws_access_key_id: ((ecr-svcaccount.api-key))
              aws_secret_access_key: ((ecr-svcaccount.api-secret))
          params:
            AWS_ACCESS_KEY_ID: ((serverless-access-key.AWS_ACCESS_KEY_ID))
            AWS_SECRET_ACCESS_KEY: ((serverless-access-key.AWS_SECRET_ACCESS_KEY))
            SLS_DEBUG: 1
          inputs:
            - name: disclosure-deploy-repository
            - name: json_outputs
          run:
            path: disclosure-deploy-repository/serverless.sh
